@using jinx_debt_tracker.Models
@using jinx_debt_tracker.Services
@using Newtonsoft.Json
@inherits IgnisAsyncComponentBase
@inject PlayerService playerService
@inject GameService gameService

<TabGroup>
    <TabList class="flex space-x-1 rounded-xl bg-red-900/20 p-1">
        @foreach (var category in _resourcesByCategory.Keys)
        {
            <Tab AsComponent="typeof(Fragment)" Context="tab">
                <button @ref="tab.Element"
                        @attributes="tab.Attributes"
                        class="@Css.Class("w-full rounded-lg py-2.5 text-sm font-medium leading-5 ring-white ring-opacity-60 ring-offset-2 ring-offset-red-400 focus:outline-none focus:ring-2", tab.IsSelected ? "text-red-700 bg-white shadow" : "text-red-100 hover:bg-white/[0.12] hover:text-white")"
                        type="button">
                    @category
                </button>
            </Tab>
        }
    </TabList>
    <TabPanels class="mt-2">
        @foreach (var (category, resources) in _resourcesByCategory)
        {
            <TabPanel @key="category"
                      class="rounded-xl bg-white p-3 ring-white ring-opacity-60 ring-offset-2 ring-offset-red-400 focus:outline-none focus:ring-2"
                      Context="_">
                <ul class="flex justify-between">
                @foreach (var resource in resources)
                    {
                        <li class="relative flex items-center p-3">
                            <h3 class="text-sm font-medium leading-5">
                                Score: @resource.Score
                            </h3>
                        </li>
                        <li class="relative flex items-center p-3">
                            <p class="text-sm font-medium leading-5">
                                Lead: @resource.Advantage
                            </p>
                        </li>
                        <li class="relative rounded-md p-3 hover:bg-gray-100 flex justify-between items-center">
                            
                            <button type="button"
                                    @onclick="() => AdvancePlayer1(resource.Game)"
                                    class="rounded-md bg-black bg-opacity-20 px-4 py-2 text-sm font-medium text-white hover:bg-opacity-30 focus:outline-none focus-visible:ring-2 focus-visible:ring-white focus-visible:ring-opacity-75">
                                @GetPlayer1Name(resource.Game)
                            </button>
                            <div> </div>
                            <button type="button"
                                    @onclick="() => AdvancePlayer2(resource.Game)"
                                    class="rounded-md bg-black bg-opacity-20 px-4 py-2 text-sm font-medium text-white hover:bg-opacity-30 focus:outline-none focus-visible:ring-2 focus-visible:ring-white focus-visible:ring-opacity-75">
                                @GetPlayer2Name(resource.Game)
                            </button>
                        
                        </li>
                    }
                </ul>
            </TabPanel>
        }
    </TabPanels>
</TabGroup>

@code
{

    [Parameter] public List<Game> Games { get; set; } = new();

    protected override async Task OnInitializedAsync(CancellationToken token)
    {
        await playerService.GetAllPlayers();
        RefreshResources();
    }

    private void RefreshResources()
    {
        _resourcesByCategory.Clear();
        foreach (var game in Games)
        {
            _resourcesByCategory.Add(
                $"{(playerService.PlayerList[game.Player1_ID].Name)} VS {playerService.PlayerList[game.Player2_ID].Name}", new Resource[]
                {
                    new()
                    {
                        Score = GetPositiveScore(game),
                        Advantage = GetWinnerName(game),
                        Game = game
                    }
                }
            );
        }
    }

    private string GetWinnerName(Game game)
    {
        if (game.Advantage == 1) return playerService.PlayerList[game.Player1_ID].Name;
        if (game.Advantage == 2) return playerService.PlayerList[game.Player2_ID].Name;
        return "Tie";
    }
    
    private string GetPlayer1Name(Game game) => playerService.PlayerList[game.Player1_ID].Name;
    private string GetPlayer2Name(Game game) => playerService.PlayerList[game.Player2_ID].Name;

    private int GetPositiveScore(Game game)
    {
        if (game.Advantage == 1) return game.Player1_Score;
        if (game.Advantage == 2) return game.Player2_Score;
        return 0;
    }

    private async Task AdvancePlayer1(Game game)
    {
        game.Player1_Score += 1;
        game.Player2_Score -= 1;
        await gameService.UpdateGame(game);
        RefreshResources();
        Update();
    }

    private async Task AdvancePlayer2(Game game)
    {
        game.Player2_Score += 1;
        game.Player1_Score -= 1;
        await gameService.UpdateGame(game);
        RefreshResources();
        Update();
    }

    private readonly IDictionary<string, Resource[]> _resourcesByCategory = new Dictionary<string, Resource[]>();

    private class Resource
    {
        public int Score { get; set; }

        public string Advantage { get; set; } = null!;

        public string LastJinx { get; set; } = null!;
        public Game Game { get; set; } = null!;
    }
}